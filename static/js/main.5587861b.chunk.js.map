{"version":3,"sources":["App.js","components/Display.js","components/Buttons.js","serviceWorker.js","index.js"],"names":["nums","ops","App","props","state","lastPressed","undefined","expression","handleKeypress","bind","e","this","innerText","target","setState","evaluated","eval","splitted","split","last","slice","includes","lastNumIdx","reverse","findIndex","char","length","className","value","input","React","Component","Display","id","ids","1","2","3","4","5","6","7","8","9","0","Buttons","map","num","idx","key","onClick","op","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5587861b.chunk.js","sourcesContent":["import React from 'react';\nimport Display from './components/Display';\nimport Buttons from './components/Buttons';\nimport './App.css';\nconst nums=[7,8,9,4,5,6,1,2,3,0];\nconst ops=['+','-','*','/'];\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state={\n      lastPressed:undefined,\n      expression:'0'\n    }\n    this.handleKeypress=this.handleKeypress.bind(this);\n  }\n\n  handleKeypress(e){\n    const {expression,lastPressed}=this.state;\n    const {innerText}=e.target;\n\n    switch(innerText){\n      case 'Clear':{\n        this.setState({\n          expression:'0',\n        });\n        break;\n      }\n\n      case '=':{\n        const evaluated=eval(expression);\n        this.setState({\n          expression:evaluated\n        })\n        break;\n      }\n\n      case '.':{\n        const splitted=expression.split(/[\\+\\-\\*\\/]/);\n        const last = splitted.slice(-1)[0];\n\n        if(!last.includes('.')){\n          this.setState({\n            expression:expression+'.'\n          })\n        }\n        break;\n      }\n\n      default:{\n        let e;\n        if(ops.includes(innerText)){\n          if(ops.includes(lastPressed) && innerText!=='-'){\n            const lastNumIdx=expression.split('').reverse().findIndex(char=>char!==' ' && nums.includes(+char));\n            e=expression.slice(0,expression.length-lastNumIdx)+innerText;\n          }else{\n            e=`${expression} ${innerText}`;\n          }\n        }else{\n          e=(expression==='0')?innerText:(expression+innerText);\n        }\n\n        this.setState({\n          expression:e\n        });\n      }\n    }\n\n    this.setState({\n      lastPressed:innerText\n    })\n  }\n\n  render(){\n    return(\n      <div className='container'>\n        <Display value={this.state.expression} />\n        <Buttons input={this.handleKeypress} nums={nums} ops={ops} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\n\nclass Display extends React.Component{\n    render(){\n        return(\n            <div id='display'>\n                <h1>{this.props.value}</h1>\n            </div>\n        )\n    }\n}\n\nexport default Display;","import React from 'react';\nconst ids={\n        1:'one',\n        2:'two',\n        3:'three',\n        4:'four',\n        5:'five',\n        6:'six',\n        7:'seven',\n        8:'eight',\n        9:'nine',\n        0:'zero',\n        '+':'add',\n        '-':'subtract',\n        '*':'multiply',\n        '/':'divide'\n      };\n\n\nclass Buttons extends React.Component{\n    render(){\n        return(\n            <div className='keys'>\n                <div className='nums-and-ops'>\n                    <div className='num-pads'>\n                        {this.props.nums.map((num,idx)=>{\n                            return(\n                                <span key={idx+ids[num]} id={ids[num]} onClick={this.props.input} className='btn btn-outline-info' >{num}</span>\n                            )\n                        })}\n                        <span id='decimal' value='.' onClick={this.props.input} className='btn btn-outline-info' >\n                            .\n                        </span>\n                        <span id='equals' value='=' onClick={this.props.input} className='btn btn-outline-success' >\n                            =\n                        </span>\n                    </div>\n                    <div className='operators'>\n                        {this.props.ops.map((op,idx)=>{\n                            return(\n                                <span key={idx+ids[op]} id={ids[op]} onClick={this.props.input} className='btn btn-outline-primary' >{op}</span>\n                            )\n                        })}\n                    </div>\n                </div>\n                <div id='clear' value='' onClick={this.props.input} className='btn btn-outline-danger' >\n                    Clear\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Buttons;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}